#!/usr/bin/env python
#python 2.7.5 requires biopython
#Version 1. Adam Taranto, April 2015
#Contact, Adam Taranto, adam.taranto@anu.edu.au

import csv
import sys
import argparse
from Bio import SeqIO
from Bio.Seq import Seq
from os.path import basename

def main(inFasta=None, targetClust=None, outFasta='filtered_seqs.fa', clustMap=None):

	if inFasta is None:
		sys.exit('No input fasta provided')

	if targetClust is None:
		sys.exit('No name list provided')

	if clustMap is None:
		sys.exit('No cluster mapping file provided')

	#Read transcript-to-cluster map into dictionary object called 'clustMem'.
	clustMem = clustDict(clustMap)

	#Read fasta records into dictionary called 'SeqMaster'.
	SeqMaster = getFasta(inFasta)

	#Open list of target clusters
	f = open(targetClust, 'rt')
	reader = csv.reader(f, dialect='excel')

	#Open output fasta
	fasta_file = open(outFasta,'w')

	#Open log file for names not found in master set
	targetsBase = basename(targetClust)
	error_list = open(str('NotFound_' + targetsBase),'w')

	#Write records for transcripts belonging to target clusters to new fasta
	for row in reader:
		#Get next target cluster name
		name = row[0]
		#Check if target cluster exists in cluster-map dictionary
		if name in clustMem:
			#For each transcript belonging to target cluster
			for trans in clustMem[name]:
				#Check if target transcript exists in fasta dictionary
				try:
					SeqMaster[trans]
				#If target transcript not in fasta, log error.
				except:
					print 'Transcript not in ref fasta: ' + name + ': ' + trans
					error_list.write(name + "\t" + trans + "\n")
				#If target transcript is in fasta, append cluster name and print to output fasta.
				else:
					fasta_name= ">%s" % (name + '_' + trans)
					fasta_seq= "%s" %(SeqMaster[trans])
					fasta_file.write(fasta_name+"\n")
					fasta_file.write(fasta_seq+"\n")
		#If target cluster was not in map file, log error.
		else:
			print 'Target cluster not in Map file: ' + name
			error_list.write(name + "\n")

	f.close()
	fasta_file.close()
	error_list.close()

def clustDict(clustMap):
	#Read transcript-to-cluster mapping file into dict object.
	#Sample data row:
	#TranscriptID	ClusterID
	#nnt3Ldvymb	Cluster-0.0

	mapFile = open(clustMap, 'rt')
	readMap = csv.reader(mapFile,delimiter='\t')

	clustMem={}

	#Write records for seqs in name file to new fasta
	for row in readMap:
		transID=row[0]
		clustID=row[1]
		
		if clustID not in clustMem:
			clustMem[clustID] = list()

		clustMem[clustID].append(transID)

	mapFile.close()
	return clustMem
	
def getFasta(inFasta):
	#Create empty dictionary
	SeqMaster={}

	#Populate dictionary with master set of fasta records
	for seq_record in SeqIO.parse(inFasta, "fasta"):
		SeqMaster[seq_record.id]=str(seq_record.seq)

	return SeqMaster

if __name__== '__main__':
	###Argument handling.
	arg_parser = argparse.ArgumentParser(description='Takes as input: a list of target cluster names, transcript-to-cluster mapping file generated by corset, and a fasta file containing transcript sequences. Returns: Fasta file of transcripts belonging to query clusters, with Cluster ID appended to their original sequence name.')
	arg_parser.add_argument("-i","--inFasta", required=True, help="Multi fasta to extract subset from")
	arg_parser.add_argument("-t","--targetClust", required=True, help="Comma delimited file with target cluster names in column one")
	arg_parser.add_argument("-o","--outFasta", default='filtered_seqs.fa', help="Directory for new sequence file to be written to.")
	arg_parser.add_argument("-c","--clustMap", required=True, help="Corset transcript-to-cluster mapping file.")
	args = arg_parser.parse_args()

	###Variable Definitions
	inFasta=args.inFasta
	targetClust=args.targetClust
	outFasta=args.outFasta
	clustMap=args.clustMap

	main(inFasta, targetClust, outFasta, clustMap)